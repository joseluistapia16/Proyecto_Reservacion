/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.reservacion.vista;

import com.reservacion.archivos.Archivo;
import static com.reservacion.archivos.Archivo.LeerReservaciones;
import com.reservacion.componentes.Tablas;
import com.reservacion.pojo.Estudiante;
import com.reservacion.pojo.Reservacion;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mayra
 */
public class Disponibilidad extends javax.swing.JDialog {

    static String fecha, escenario;
    ArrayList<Reservacion> lista = LeerReservaciones("Reservaciones.obj");
    DefaultTableModel model;
    int o = 0, Pos;
    Reservacion obj2;
    int horita[] = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
    String[] Filas = new String[horita.length];
    String nombre;

    /**
     * Creates new form Disponiblidad
     */
    public Disponibilidad(java.awt.Frame parent, boolean modal, String fecha, String escenario) {
        super(parent, modal);
        initComponents();

        llenaTabla();
    }

    public Disponibilidad(java.awt.Frame parent, boolean modal, Reservacion obj, String nom) {
        super(parent, modal);
        initComponents();
        obj2 = obj;
        this.nombre = nom;
        this.fecha = obj.getFecha();
        this.escenario = obj.getEscenario();
        llenaTabla();

    }

    public String[] obtenerNombres(String arreglo[]) {
        String nombre[] = new String[arreglo.length];
        for (int i = 0; i < arreglo.length; i++) {
            nombre[i] = obtenerCedula(arreglo[i]);
        }
        return nombre;
    }

    public String obtenerCedula(String cedula) {
        ArrayList<Estudiante> lista1 = Archivo.LeerEstudiantes("Estudiantes.obj");
        String cadena = null;
        for (int i = 0; i < lista1.size(); i++) {
            if (cedula.equals(lista1.get(i).getCedula())) {
                cadena = lista1.get(i).getNombre() + " " + lista1.get(i).getApellido();
            }
        }
        return cadena;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        boton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(250, 170, 0, 0));

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla.setCellSelectionEnabled(false);
        Tabla.setEditingRow(0);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        boton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boton.setText("Salir");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(435, 435, 435)
                .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boton)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked


    }//GEN-LAST:event_TablaMouseClicked

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
        int i = 0;
        Tabla.setRowSelectionAllowed(false);
        if (evt.getClickCount() == 2) {
            try {
                i = Tabla.getSelectedColumn();
                if (!"DISPONIBLE".equals((String) Tabla.getValueAt(0, i))) {
                    JOptionPane.showMessageDialog(null, "Ya est√° Reservado!!");

                }
                if ("DISPONIBLE".equals((String) Tabla.getValueAt(0, i))) {
                    Filas[i] = nombre;
                    llenaTabla1();
                    obj2.setHora_inicio(horita[i]);
                    obj2.setHora_final((horita[i]+1));
                    obj2.setTotal_hora(1);
                    setObj2(obj2);
                    Tabla.setEnabled(false);
                }
                System.out.println(Tabla.getSelectedColumn() + " " + (String) Tabla.getValueAt(0, i));
            } catch (Exception e) {
            }

        }
    }//GEN-LAST:event_TablaMousePressed

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
       setVisible(false);
    }//GEN-LAST:event_botonActionPerformed
    private void llenaTabla() {
        int[] a = {200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200};
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);

        model = Tablas.VaciarTabla(Tabla);
        lista = Archivo.LeerReservaciones("Reservaciones.obj");
        String[] Co = {"7:00", "8:00", "9:00 ", "10:00", "11:00", "12:00",
            "13:00", "14:00", "15:00 ", "16:00", "17:00", "18:00"};
        model = new DefaultTableModel(null, Co);
        Tabla.setShowGrid(true);
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        Tabla.setAutoResizeMode(Tabla.AUTO_RESIZE_OFF);
        Tabla.setRowHeight(60);
        int u = 0;
        for (int i = 0; i < horita.length; i++) {
            Filas[i] = "" + horita[i];
        }
        for (int i = 0; i < horita.length; i++) {
            int op[] = buscarValor(horita[i], lista);

            Filas[i] = "" + op[2];
            if (Filas[i].length() == 9) {
                Filas[i] = "0" + op[2];

            }
            if (op[1] > 0) {
                if (op[2] != 0) {

                    Filas[i + 1] = "" + op[2];
                    if (Filas[i + 1].length() == 9) {
                        Filas[i + 1] = "0" + op[2];
                    }
                    i++;
                }
            }

        }

        Filas = obtenerNombres(Filas);
        model.addRow(Filas);
        Tabla.setModel(model);

        for (int i = 0; i < a.length; i++) {
            Tabla.getColumnModel().getColumn(i).setPreferredWidth(a[i]);
            Tabla.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }

        for (int i = 0; i < Tabla.getColumnCount(); i++) {
            if (Tabla.getValueAt(0, i) == null) {
                Tabla.setValueAt("DISPONIBLE", 0, i);
            }
        }
    }

    private void llenaTabla1() {
        int[] a = {200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200};
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        model = Tablas.VaciarTabla(Tabla);
        lista = Archivo.LeerReservaciones("Reservaciones.obj");
        String[] Co = {"7:00", "8:00", "9:00 ", "10:00", "11:00", "12:00",
            "13:00", "14:00", "15:00 ", "16:00", "17:00", "18:00"};
        model = new DefaultTableModel(null, Co);
        Tabla.setShowGrid(true);
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        Tabla.setAutoResizeMode(Tabla.AUTO_RESIZE_OFF);
        Tabla.setRowHeight(60);
        model.addRow(Filas);
        Tabla.setModel(model);
        for (int i = 0; i < a.length; i++) {
            Tabla.getColumnModel().getColumn(i).setPreferredWidth(a[i]);
            Tabla.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }

        for (int i = 0; i < Tabla.getColumnCount(); i++) {
            if (Tabla.getValueAt(0, i) == null) {
                Tabla.setValueAt("DISPONIBLE", 0, i);
            }
        }
    }

    public int[] buscarValor(int val, ArrayList<Reservacion> lista1) {
        int valor[] = new int[3];
        for (int i = 0; i < lista1.size(); i++) {
            if (escenario.equals(lista.get(i).getEscenario())
                    && fecha.equals(lista.get(i).getFecha())) {
                if (val == lista1.get(i).getHora_inicio()) {
                    valor[0] = val;
                    valor[2] = Integer.parseInt(lista.get(i).getCedula());
                    if (lista1.get(i).getTotal_hora() == 2) {
                        valor[1] = val + 1;
                    } else {
                        valor[1] = 0;
                    }
                    break;
                }
            }
        }
        return valor;

    }

    public Reservacion getObj2() {
        return obj2;
    }

    public void setObj2(Reservacion obj2) {
        this.obj2 = obj2;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Disponibilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Disponibilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Disponibilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Disponibilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Disponibilidad dialog = new Disponibilidad(new javax.swing.JFrame(), true, fecha, escenario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton boton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
